name: Deploy to AWS

on:
  push:
    branches:
      - test  # Puede ser cualquier rama a la que estÃ©s haciendo push

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v2

      - name: Login en Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Construir y subir imagen a Docker Hub
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/lists-service:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/lists-service:latest

      - name: Conectar a AWS EC2 y desplegar
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_INSTANCE_1 }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY_M }}
          script: |
            echo "ðŸš€ Iniciando despliegue en AWS EC2..."

            # Verificar si Docker estÃ¡ instalado y ejecutarlo si no estÃ¡
            if ! command -v docker &> /dev/null
            then
                echo "Docker no estÃ¡ instalado. Instalando..."
                sudo yum install -y docker
                sudo service docker start
            fi

            # Detener y eliminar el servicio si ya existe
            if sudo docker service ls --format '{{.Name}}' | grep -q lists-service; then
              echo "ðŸ›‘ Deteniendo y eliminando servicio existente..."
              sudo docker service rm lists-service
            fi

            # Limpiar imÃ¡genes antiguas
            echo "ðŸ§¹ Limpiando imÃ¡genes antiguas..."
            sudo docker image prune -af || true

            # Descargar la Ãºltima versiÃ³n de la imagen desde Docker Hub
            echo "ðŸ“¥ Descargando nueva imagen..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/lists-service:latest

            # Crear el servicio de Docker
            echo "ðŸš€ Creando servicio de Docker..."
            sudo docker service create --name lists-service \
              --env DB_HOST=${{ secrets.DB_HOST }} \
              --env DB_USER=${{ secrets.DB_USER }} \
              --env DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              --env DB_NAME=${{ secrets.DB_NAME }} \
              -p 6000:6000 \
              ${{ secrets.DOCKER_USERNAME }}/lists-service:latest

            echo "âœ… Despliegue completado con Ã©xito."
